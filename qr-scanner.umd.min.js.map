{"version":3,"file":"qr-scanner.umd.min.js","sources":["src/qr-scanner.ts"],"sourcesContent":["class QrScanner {\r\n    static readonly DEFAULT_CANVAS_SIZE = 400;\r\n    static readonly DEFAULT_FORMAT = 'qr_code';\r\n    static readonly NO_QR_CODE_FOUND = 'No QR code found';\r\n    private static _disableBarcodeDetector = false;\r\n    private static _workerMessageId = 0;\r\n    private static _barcodeDetectorFormats: string[] = [QrScanner.DEFAULT_FORMAT];\r\n\r\n    /** @deprecated */\r\n    static set WORKER_PATH(workerPath: string) {\r\n        console.warn('Setting QrScanner.WORKER_PATH is not required and not supported anymore. '\r\n            + 'Have a look at the README for new setup instructions.');\r\n    }\r\n\r\n    static async hasCamera(): Promise<boolean> {\r\n        try {\r\n            return !!(await QrScanner.listCameras(false)).length;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    static async listCameras(requestLabels = false): Promise<Array<QrScanner.Camera>> {\r\n        if (!navigator.mediaDevices) return [];\r\n\r\n        const enumerateCameras = async (): Promise<Array<MediaDeviceInfo>> =>\r\n            (await navigator.mediaDevices.enumerateDevices()).filter((device) => device.kind === 'videoinput');\r\n\r\n        // Note that enumerateDevices can always be called and does not prompt the user for permission.\r\n        // However, enumerateDevices only includes device labels if served via https and an active media stream exists\r\n        // or permission to access the camera was given. Therefore, if we're not getting labels but labels are requested\r\n        // ask for camera permission by opening a stream.\r\n        let openedStream: MediaStream | undefined;\r\n        try {\r\n            if (requestLabels && (await enumerateCameras()).every((camera) => !camera.label)) {\r\n                openedStream = await navigator.mediaDevices.getUserMedia({ audio: false, video: true });\r\n            }\r\n        } catch (e) {\r\n            // Fail gracefully, especially if the device has no camera or on mobile when the camera is already in use\r\n            // and some browsers disallow a second stream.\r\n        }\r\n\r\n        try {\r\n            return (await enumerateCameras()).map((camera, i) => ({\r\n                id: camera.deviceId,\r\n                label: camera.label || (i === 0 ? 'Default Camera' : `Camera ${i + 1}`),\r\n            }));\r\n        } finally {\r\n            // close the stream we just opened for getting camera access for listing the device labels\r\n            if (openedStream) {\r\n                console.warn('Call listCameras after successfully starting a QR scanner to avoid creating '\r\n                    + 'a temporary video stream');\r\n                QrScanner._stopVideoStream(openedStream);\r\n            }\r\n        }\r\n    }\r\n\r\n    readonly $video: HTMLVideoElement;\r\n    readonly $canvas: HTMLCanvasElement;\r\n    readonly $overlay?: HTMLDivElement;\r\n    private readonly $codeOutlineHighlight?: SVGSVGElement;\r\n    private readonly _onDecode?: (result: QrScanner.ScanResult) => void;\r\n    private readonly _legacyOnDecode?: (result: string) => void;\r\n    private readonly _legacyCanvasSize: number = QrScanner.DEFAULT_CANVAS_SIZE;\r\n    private _preferredCamera: QrScanner.FacingMode | QrScanner.DeviceId = 'environment';\r\n    private readonly _maxScansPerSecond: number = 25;\r\n    private _lastScanTimestamp: number = -1;\r\n    private _scanRegion: QrScanner.ScanRegion;\r\n    private _codeOutlineHighlightRemovalTimeout?: number;\r\n    private _qrEnginePromise: Promise<Worker | BarcodeDetector>\r\n    private _active: boolean = false;\r\n    private _paused: boolean = false;\r\n    private _flashOn: boolean = false;\r\n    private _destroyed: boolean = false;\r\n\r\n    constructor(\r\n        video: HTMLVideoElement,\r\n        onDecode: (result: QrScanner.ScanResult) => void,\r\n        options: {\r\n            onDecodeError?: (error: Error | string) => void,\r\n            calculateScanRegion?: (video: HTMLVideoElement) => QrScanner.ScanRegion,\r\n            preferredCamera?: QrScanner.FacingMode | QrScanner.DeviceId,\r\n            maxScansPerSecond?: number;\r\n            highlightScanRegion?: boolean,\r\n            highlightCodeOutline?: boolean,\r\n            overlay?: HTMLDivElement,\r\n            barcodeDetectorFormats: string[];\r\n            /** just a temporary flag until we switch entirely to the new api */\r\n            returnDetailedScanResult?: true,\r\n        },\r\n    );\r\n    /** @deprecated */\r\n    constructor(\r\n        video: HTMLVideoElement,\r\n        onDecode: (result: string) => void,\r\n        onDecodeError?: (error: Error | string) => void,\r\n        calculateScanRegion?: (video: HTMLVideoElement) => QrScanner.ScanRegion,\r\n        preferredCamera?: QrScanner.FacingMode | QrScanner.DeviceId,\r\n    );\r\n    /** @deprecated */\r\n    constructor(\r\n        video: HTMLVideoElement,\r\n        onDecode: (result: string) => void,\r\n        onDecodeError?: (error: Error | string) => void,\r\n        canvasSize?: number,\r\n        preferredCamera?: QrScanner.FacingMode | QrScanner.DeviceId,\r\n    );\r\n    /** @deprecated */\r\n    constructor(video: HTMLVideoElement, onDecode: (result: string) => void, canvasSize?: number);\r\n    constructor(\r\n        video: HTMLVideoElement,\r\n        onDecode: ((result: QrScanner.ScanResult) => void) | ((result: string) => void),\r\n        canvasSizeOrOnDecodeErrorOrOptions?: number | ((error: Error | string) => void) | {\r\n            onDecodeError?: (error: Error | string) => void,\r\n            calculateScanRegion?: (video: HTMLVideoElement) => QrScanner.ScanRegion,\r\n            preferredCamera?: QrScanner.FacingMode | QrScanner.DeviceId,\r\n            maxScansPerSecond?: number;\r\n            highlightScanRegion?: boolean,\r\n            highlightCodeOutline?: boolean,\r\n            barcodeDetectorFormats?: string[],\r\n            overlay?: HTMLDivElement,\r\n            /** just a temporary flag until we switch entirely to the new api */\r\n            returnDetailedScanResult?: true,\r\n        },\r\n        canvasSizeOrCalculateScanRegion?: number | ((video: HTMLVideoElement) => QrScanner.ScanRegion),\r\n        preferredCamera?: QrScanner.FacingMode | QrScanner.DeviceId,\r\n    ) {\r\n        this.$video = video;\r\n        this.$canvas = document.createElement('canvas');\r\n\r\n        if (canvasSizeOrOnDecodeErrorOrOptions && typeof canvasSizeOrOnDecodeErrorOrOptions === 'object') {\r\n            // we got an options object using the new api\r\n            this._onDecode = onDecode as QrScanner['_onDecode'];\r\n        } else {\r\n            if (canvasSizeOrOnDecodeErrorOrOptions || canvasSizeOrCalculateScanRegion || preferredCamera) {\r\n                console.warn('You\\'re using a deprecated version of the QrScanner constructor which will be removed in '\r\n                    + 'the future');\r\n            } else {\r\n                // Only video and onDecode were specified and we can't distinguish between new or old api usage. For\r\n                // backwards compatibility we have to assume the old api for now. The options object is marked as non-\r\n                // optional in the parameter list above to make clear that ScanResult instead of string is only passed\r\n                // if an options object was provided. However, in the future once legacy support is removed, the options\r\n                // object should become optional.\r\n                console.warn('Note that the type of the scan result passed to onDecode will change in the future. '\r\n                    + 'To already switch to the new api today, you can pass returnDetailedScanResult: true.');\r\n            }\r\n            this._legacyOnDecode = onDecode as QrScanner['_legacyOnDecode'];\r\n        }\r\n\r\n        const options = typeof canvasSizeOrOnDecodeErrorOrOptions === 'object'\r\n            ? canvasSizeOrOnDecodeErrorOrOptions\r\n            : {};\r\n        this._onDecodeError = options.onDecodeError || (typeof canvasSizeOrOnDecodeErrorOrOptions === 'function'\r\n            ? canvasSizeOrOnDecodeErrorOrOptions\r\n            : this._onDecodeError);\r\n        this._calculateScanRegion = options.calculateScanRegion || (typeof canvasSizeOrCalculateScanRegion==='function'\r\n            ? canvasSizeOrCalculateScanRegion\r\n            : this._calculateScanRegion);\r\n        this._preferredCamera = options.preferredCamera || preferredCamera || this._preferredCamera;\r\n        this._legacyCanvasSize = typeof canvasSizeOrOnDecodeErrorOrOptions === 'number'\r\n            ? canvasSizeOrOnDecodeErrorOrOptions\r\n            : typeof canvasSizeOrCalculateScanRegion === 'number'\r\n                ? canvasSizeOrCalculateScanRegion\r\n                : this._legacyCanvasSize;\r\n        this._maxScansPerSecond = options.maxScansPerSecond || this._maxScansPerSecond;\r\n\r\n        this._onPlay = this._onPlay.bind(this);\r\n        this._onLoadedMetaData = this._onLoadedMetaData.bind(this);\r\n        this._onVisibilityChange = this._onVisibilityChange.bind(this);\r\n        this._updateOverlay = this._updateOverlay.bind(this);\r\n\r\n        // @ts-ignore\r\n        video.disablePictureInPicture = true;\r\n        // Allow inline playback on iPhone instead of requiring full screen playback,\r\n        // see https://webkit.org/blog/6784/new-video-policies-for-ios/\r\n        // @ts-ignore\r\n        video.playsInline = true;\r\n        // Allow play() on iPhone without requiring a user gesture. Should not really be needed as camera stream\r\n        // includes no audio, but just to be safe.\r\n        video.muted = true;\r\n\r\n        // Avoid Safari stopping the video stream on a hidden video.\r\n        // See https://github.com/cozmo/jsQR/issues/185\r\n        let shouldHideVideo = false;\r\n        if (video.hidden) {\r\n            video.hidden = false;\r\n            shouldHideVideo = true;\r\n        }\r\n        if (!document.body.contains(video)) {\r\n            document.body.appendChild(video);\r\n            shouldHideVideo = true;\r\n        }\r\n        const videoContainer = video.parentElement!;\r\n\r\n        if (options.barcodeDetectorFormats?.length) {\r\n            QrScanner._barcodeDetectorFormats = options.barcodeDetectorFormats;\r\n        }\r\n\r\n        if (options.highlightScanRegion || options.highlightCodeOutline) {\r\n            const gotExternalOverlay = !!options.overlay;\r\n            this.$overlay = options.overlay || document.createElement('div');\r\n            const overlayStyle = this.$overlay.style;\r\n            overlayStyle.position = 'absolute';\r\n            overlayStyle.display = 'none';\r\n            overlayStyle.pointerEvents = 'none';\r\n            this.$overlay.classList.add('scan-region-highlight');\r\n            if (!gotExternalOverlay && options.highlightScanRegion) {\r\n                // default style; can be overwritten via css, e.g. by changing the svg's stroke color, hiding the\r\n                // .scan-region-highlight-svg, setting a border, outline, background, etc.\r\n                this.$overlay.innerHTML = '<svg class=\"scan-region-highlight-svg\" viewBox=\"0 0 238 238\" '\r\n                    + 'preserveAspectRatio=\"none\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;'\r\n                    + 'fill:none;stroke:#e9b213;stroke-width:4;stroke-linecap:round;stroke-linejoin:round\">'\r\n                    + '<path d=\"M31 2H10a8 8 0 0 0-8 8v21M207 2h21a8 8 0 0 1 8 8v21m0 176v21a8 8 0 0 1-8 8h-21m-176 '\r\n                    + '0H10a8 8 0 0 1-8-8v-21\"/></svg>';\r\n                try {\r\n                    this.$overlay.firstElementChild!.animate({ transform: ['scale(.98)', 'scale(1.01)'] }, {\r\n                        duration: 400,\r\n                        iterations: Infinity,\r\n                        direction: 'alternate',\r\n                        easing: 'ease-in-out',\r\n                    });\r\n                } catch (e) {}\r\n                videoContainer.insertBefore(this.$overlay, this.$video.nextSibling);\r\n            }\r\n            if (options.highlightCodeOutline) {\r\n                // default style; can be overwritten via css\r\n                this.$overlay.insertAdjacentHTML(\r\n                    'beforeend',\r\n                    '<svg class=\"code-outline-highlight\" preserveAspectRatio=\"none\" style=\"display:none;width:100%;'\r\n                        + 'height:100%;fill:none;stroke:#e9b213;stroke-width:5;stroke-dasharray:25;'\r\n                        + 'stroke-linecap:round;stroke-linejoin:round\"><polygon/></svg>',\r\n                );\r\n                this.$codeOutlineHighlight = this.$overlay.lastElementChild as SVGSVGElement;\r\n            }\r\n        }\r\n        this._scanRegion = this._calculateScanRegion(video);\r\n\r\n        requestAnimationFrame(() => {\r\n            // Checking in requestAnimationFrame which should avoid a potential additional re-flow for getComputedStyle.\r\n            const videoStyle = window.getComputedStyle(video);\r\n            if (videoStyle.display === 'none') {\r\n                video.style.setProperty('display', 'block', 'important');\r\n                shouldHideVideo = true;\r\n            }\r\n            if (videoStyle.visibility !== 'visible') {\r\n                video.style.setProperty('visibility', 'visible', 'important');\r\n                shouldHideVideo = true;\r\n            }\r\n            if (shouldHideVideo) {\r\n                // Hide the video in a way that doesn't cause Safari to stop the playback.\r\n                console.warn('QrScanner has overwritten the video hiding style to avoid Safari stopping the playback.');\r\n                video.style.opacity = '0';\r\n                video.style.width = '0';\r\n                video.style.height = '0';\r\n                if (this.$overlay && this.$overlay.parentElement) {\r\n                    this.$overlay.parentElement.removeChild(this.$overlay);\r\n                }\r\n                // @ts-ignore\r\n                delete this.$overlay!;\r\n                // @ts-ignore\r\n                delete this.$codeOutlineHighlight!;\r\n            }\r\n\r\n            if (this.$overlay) {\r\n                this._updateOverlay();\r\n            }\r\n        });\r\n\r\n        video.addEventListener('play', this._onPlay);\r\n        video.addEventListener('loadedmetadata', this._onLoadedMetaData);\r\n        document.addEventListener('visibilitychange', this._onVisibilityChange);\r\n        window.addEventListener('resize', this._updateOverlay);\r\n\r\n        this._qrEnginePromise = QrScanner.createQrEngine();\r\n    }\r\n\r\n    async hasFlash(): Promise<boolean> {\r\n        let stream: MediaStream | undefined;\r\n        try {\r\n            if (this.$video.srcObject) {\r\n                if (!(this.$video.srcObject instanceof MediaStream)) return false; // srcObject is not a camera stream\r\n                stream = this.$video.srcObject;\r\n            } else {\r\n                stream = (await this._getCameraStream()).stream;\r\n            }\r\n            return 'torch' in stream.getVideoTracks()[0].getSettings();\r\n        } catch (e) {\r\n            return false;\r\n        } finally {\r\n            // close the stream we just opened for detecting whether it supports flash\r\n            if (stream && stream !== this.$video.srcObject) {\r\n                console.warn('Call hasFlash after successfully starting the scanner to avoid creating '\r\n                    + 'a temporary video stream');\r\n                QrScanner._stopVideoStream(stream);\r\n            }\r\n        }\r\n    }\r\n\r\n    isFlashOn(): boolean {\r\n        return this._flashOn;\r\n    }\r\n\r\n    async turnFlashOnOff(onOff: boolean): Promise<void> {\r\n        if (this._flashOn == onOff || this._destroyed) return;\r\n        const oldFlashOn = this._flashOn\r\n        this._flashOn = onOff;\r\n        if (!this._active || this._paused) return; // flash will be turned on later on .start()\r\n        try {\r\n            if (!await this.hasFlash()) throw 'No flash available';\r\n            // Note that the video track is guaranteed to exist and to be a MediaStream due to the check in hasFlash\r\n            await (this.$video.srcObject as MediaStream).getVideoTracks()[0].applyConstraints({\r\n                // @ts-ignore: constraint 'torch' is unknown to ts\r\n                advanced: [{ torch: onOff}],\r\n            });\r\n        } catch (e) {\r\n            this._flashOn = oldFlashOn ;\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    async toggleFlash(): Promise<void> {\r\n        await this.turnFlashOnOff(!this._flashOn);\r\n    }\r\n\r\n    async turnFlashOn(): Promise<void> {\r\n        await this.turnFlashOnOff(true);\r\n    }\r\n\r\n    async turnFlashOff(): Promise<void> {\r\n        await this.turnFlashOnOff(false);\r\n    }\r\n\r\n    destroy(): void {\r\n        this.$video.removeEventListener('loadedmetadata', this._onLoadedMetaData);\r\n        this.$video.removeEventListener('play', this._onPlay);\r\n        document.removeEventListener('visibilitychange', this._onVisibilityChange);\r\n        window.removeEventListener('resize', this._updateOverlay);\r\n\r\n        this._destroyed = true;\r\n        this._flashOn = false;\r\n        this.stop(); // sets this._paused = true and this._active = false\r\n        QrScanner._postWorkerMessage(this._qrEnginePromise, 'close');\r\n    }\r\n\r\n    async start(): Promise<void> {\r\n        if (this._destroyed) throw new Error('The QR scanner can not be started as it had been destroyed.');\r\n        if (this._active && !this._paused) return;\r\n\r\n        if (window.location.protocol !== 'https:') {\r\n            // warn but try starting the camera anyways\r\n            console.warn('The camera stream is only accessible if the page is transferred via https.');\r\n        }\r\n\r\n        this._active = true;\r\n        if (document.hidden) return; // camera will be started as soon as tab is in foreground\r\n        this._paused = false;\r\n        if (this.$video.srcObject) {\r\n            // camera stream already/still set\r\n            await this.$video.play();\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const { stream, facingMode } = await this._getCameraStream();\r\n            if (!this._active || this._paused) {\r\n                // was stopped in the meantime\r\n                QrScanner._stopVideoStream(stream);\r\n                return;\r\n            }\r\n            this._setVideoMirror(facingMode);\r\n            this.$video.srcObject = stream;\r\n            await this.$video.play();\r\n\r\n            // Restart the flash if it was previously on\r\n            if (this._flashOn) {\r\n                this._flashOn = false; // force turnFlashOn to restart the flash\r\n                this.turnFlashOn().catch(() => {});\r\n            }\r\n        } catch (e) {\r\n            if (this._paused) return;\r\n            this._active = false;\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    stop(): void {\r\n        this.pause();\r\n        this._active = false;\r\n    }\r\n\r\n    async pause(stopStreamImmediately = false): Promise<boolean> {\r\n        this._paused = true;\r\n        if (!this._active) return true;\r\n        this.$video.pause();\r\n\r\n        if (this.$overlay) {\r\n            this.$overlay.style.display = 'none';\r\n        }\r\n\r\n        const stopStream = () => {\r\n            if (this.$video.srcObject instanceof MediaStream) {\r\n                // revoke srcObject only if it's a stream which was likely set by us\r\n                QrScanner._stopVideoStream(this.$video.srcObject);\r\n                this.$video.srcObject = null;\r\n            }\r\n        };\r\n\r\n        if (stopStreamImmediately) {\r\n            stopStream();\r\n            return true;\r\n        }\r\n\r\n        await new Promise((resolve) => setTimeout(resolve, 300));\r\n        if (!this._paused) return false;\r\n        stopStream();\r\n        return true;\r\n    }\r\n\r\n    async setCamera(facingModeOrDeviceId: QrScanner.FacingMode | QrScanner.DeviceId): Promise<void> {\r\n        if (facingModeOrDeviceId === this._preferredCamera) return;\r\n        this._preferredCamera = facingModeOrDeviceId;\r\n        // Restart the scanner with the new camera which will also update the video mirror and the scan region.\r\n        await this._restartVideoStream();\r\n    }\r\n\r\n    static async scanImage(\r\n        imageOrFileOrBlobOrUrl: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\r\n            | SVGImageElement | File | Blob | URL | String,\r\n        options: {\r\n            scanRegion?: QrScanner.ScanRegion | null,\r\n            qrEngine?: Worker | BarcodeDetector | Promise<Worker | BarcodeDetector> | null,\r\n            canvas?: HTMLCanvasElement | null,\r\n            disallowCanvasResizing?: boolean,\r\n            alsoTryWithoutScanRegion?: boolean,\r\n            /** just a temporary flag until we switch entirely to the new api */\r\n            returnDetailedScanResult?: true,\r\n        },\r\n    ): Promise<QrScanner.ScanResult>;\r\n    /** @deprecated */\r\n    static async scanImage(\r\n        imageOrFileOrBlobOrUrl: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\r\n            | SVGImageElement | File | Blob | URL | String,\r\n        scanRegion?: QrScanner.ScanRegion | null,\r\n        qrEngine?: Worker | BarcodeDetector | Promise<Worker | BarcodeDetector> | null,\r\n        canvas?: HTMLCanvasElement | null,\r\n        disallowCanvasResizing?: boolean,\r\n        alsoTryWithoutScanRegion?: boolean,\r\n    ): Promise<string>;\r\n    static async scanImage(\r\n        imageOrFileOrBlobOrUrl: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\r\n            | SVGImageElement | File | Blob | URL | String,\r\n        scanRegionOrOptions?: QrScanner.ScanRegion | {\r\n            scanRegion?: QrScanner.ScanRegion | null,\r\n            qrEngine?: Worker | BarcodeDetector | Promise<Worker | BarcodeDetector> | null,\r\n            canvas?: HTMLCanvasElement | null,\r\n            disallowCanvasResizing?: boolean,\r\n            alsoTryWithoutScanRegion?: boolean,\r\n            /** just a temporary flag until we switch entirely to the new api */\r\n            returnDetailedScanResult?: true,\r\n        } | null,\r\n        qrEngine?: Worker | BarcodeDetector | Promise<Worker | BarcodeDetector> | null,\r\n        canvas?: HTMLCanvasElement | null,\r\n        disallowCanvasResizing: boolean = false,\r\n        alsoTryWithoutScanRegion: boolean = false,\r\n    ): Promise<string | QrScanner.ScanResult> {\r\n        let scanRegion: QrScanner.ScanRegion | null | undefined;\r\n        let returnDetailedScanResult = false;\r\n        if (scanRegionOrOptions && (\r\n            'scanRegion' in scanRegionOrOptions\r\n            || 'qrEngine' in scanRegionOrOptions\r\n            || 'canvas' in scanRegionOrOptions\r\n            || 'disallowCanvasResizing' in scanRegionOrOptions\r\n            || 'alsoTryWithoutScanRegion' in scanRegionOrOptions\r\n            || 'returnDetailedScanResult' in scanRegionOrOptions\r\n        )) {\r\n            // we got an options object using the new api\r\n            scanRegion = scanRegionOrOptions.scanRegion;\r\n            qrEngine = scanRegionOrOptions.qrEngine;\r\n            canvas = scanRegionOrOptions.canvas;\r\n            disallowCanvasResizing = scanRegionOrOptions.disallowCanvasResizing || false;\r\n            alsoTryWithoutScanRegion = scanRegionOrOptions.alsoTryWithoutScanRegion || false;\r\n            returnDetailedScanResult = true;\r\n        } else if (scanRegionOrOptions || qrEngine || canvas || disallowCanvasResizing || alsoTryWithoutScanRegion) {\r\n            console.warn('You\\'re using a deprecated api for scanImage which will be removed in the future.');\r\n        } else {\r\n            // Only imageOrFileOrBlobOrUrl was specified and we can't distinguish between new or old api usage. For\r\n            // backwards compatibility we have to assume the old api for now. The options object is marked as non-\r\n            // optional in the parameter list above to make clear that ScanResult instead of string is only returned if\r\n            // an options object was provided. However, in the future once legacy support is removed, the options object\r\n            // should become optional.\r\n            console.warn('Note that the return type of scanImage will change in the future. To already switch to the '\r\n                + 'new api today, you can pass returnDetailedScanResult: true.');\r\n        }\r\n\r\n        const gotExternalEngine = !!qrEngine;\r\n\r\n        try {\r\n            let image: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\r\n                | SVGImageElement;\r\n            let canvasContext: CanvasRenderingContext2D;\r\n            [qrEngine, image] = await Promise.all([\r\n                qrEngine || QrScanner.createQrEngine(),\r\n                QrScanner._loadImage(imageOrFileOrBlobOrUrl),\r\n            ]);\r\n            [canvas, canvasContext] = QrScanner._drawToCanvas(image, scanRegion, canvas, disallowCanvasResizing);\r\n            let detailedScanResult: QrScanner.ScanResult;\r\n\r\n            if (qrEngine instanceof Worker) {\r\n                const qrEngineWorker = qrEngine; // for ts to know that it's still a worker later in the event listeners\r\n                if (!gotExternalEngine) {\r\n                    // Enable scanning of inverted color qr codes.\r\n                    QrScanner._postWorkerMessageSync(qrEngineWorker, 'inversionMode', 'both');\r\n                }\r\n                detailedScanResult = await new Promise((resolve, reject) => {\r\n                    let timeout: number;\r\n                    let onMessage: (event: MessageEvent) => void;\r\n                    let onError: (error: ErrorEvent | string) => void;\r\n                    let expectedResponseId = -1;\r\n                    onMessage = (event: MessageEvent) => {\r\n                        if (event.data.id !== expectedResponseId) {\r\n                            return;\r\n                        }\r\n                        qrEngineWorker.removeEventListener('message', onMessage);\r\n                        qrEngineWorker.removeEventListener('error', onError);\r\n                        clearTimeout(timeout);\r\n                        if (event.data.data !== null) {\r\n                            resolve({\r\n                                data: event.data.data,\r\n                                cornerPoints: QrScanner._convertPoints(event.data.cornerPoints, scanRegion),\r\n                            });\r\n                        } else {\r\n                            reject(QrScanner.NO_QR_CODE_FOUND);\r\n                        }\r\n                    };\r\n                    onError = (error: ErrorEvent | string) => {\r\n                        qrEngineWorker.removeEventListener('message', onMessage);\r\n                        qrEngineWorker.removeEventListener('error', onError);\r\n                        clearTimeout(timeout);\r\n                        const errorMessage = !error ? 'Unknown Error' : ((error as ErrorEvent).message || error);\r\n                        reject('Scanner error: ' + errorMessage);\r\n                    };\r\n                    qrEngineWorker.addEventListener('message', onMessage);\r\n                    qrEngineWorker.addEventListener('error', onError);\r\n                    timeout = setTimeout(() => onError('timeout'), 10000);\r\n                    const imageData = canvasContext.getImageData(0, 0, canvas!.width, canvas!.height);\r\n                    expectedResponseId = QrScanner._postWorkerMessageSync(\r\n                        qrEngineWorker,\r\n                        'decode',\r\n                        imageData,\r\n                        [imageData.data.buffer],\r\n                    );\r\n                });\r\n            } else {\r\n                detailedScanResult = await Promise.race([\r\n                    new Promise<QrScanner.ScanResult>((resolve, reject) => window.setTimeout(\r\n                        () => reject('Scanner error: timeout'),\r\n                        10000,\r\n                    )),\r\n                    (async (): Promise<QrScanner.ScanResult> => {\r\n                        try {\r\n                            const [scanResult] = await qrEngine.detect(canvas!);\r\n                            if (!scanResult) throw QrScanner.NO_QR_CODE_FOUND;\r\n                            return {\r\n                                data: scanResult.rawValue,\r\n                                cornerPoints: QrScanner._convertPoints(scanResult.cornerPoints, scanRegion),\r\n                            };\r\n                        } catch (e) {\r\n                            const errorMessage = (e as Error).message || e as string;\r\n                            if (/not implemented|service unavailable/.test(errorMessage)) {\r\n                                // Not implemented can apparently for some reason happen even though getSupportedFormats\r\n                                // in createQrScanner reported that it's supported, see issue #98.\r\n                                // Service unavailable can happen after some time when the BarcodeDetector crashed and\r\n                                // can theoretically be recovered from by creating a new BarcodeDetector. However, in\r\n                                // newer browsers this issue does not seem to be present anymore and therefore we do not\r\n                                // apply this optimization anymore but just set _disableBarcodeDetector in both cases.\r\n                                // Also note that if we got an external qrEngine that crashed, we should possibly notify\r\n                                // the caller about it, but we also don't do this here, as it's such an unlikely case.\r\n                                QrScanner._disableBarcodeDetector = true;\r\n                                // retry without passing the broken BarcodeScanner instance\r\n                                return QrScanner.scanImage(imageOrFileOrBlobOrUrl, {\r\n                                    scanRegion,\r\n                                    canvas,\r\n                                    disallowCanvasResizing,\r\n                                    alsoTryWithoutScanRegion,\r\n                                });\r\n                            }\r\n                            throw `Scanner error: ${errorMessage}`;\r\n                        }\r\n                    })(),\r\n                ]);\r\n            }\r\n            return returnDetailedScanResult ? detailedScanResult : detailedScanResult.data;\r\n        } catch (e) {\r\n            if (!scanRegion || !alsoTryWithoutScanRegion) throw e;\r\n            const detailedScanResult = await QrScanner.scanImage(\r\n                imageOrFileOrBlobOrUrl,\r\n                { qrEngine, canvas, disallowCanvasResizing },\r\n            );\r\n            return returnDetailedScanResult ? detailedScanResult : detailedScanResult.data;\r\n        } finally {\r\n            if (!gotExternalEngine) {\r\n                QrScanner._postWorkerMessage(qrEngine!, 'close');\r\n            }\r\n        }\r\n    }\r\n\r\n    setGrayscaleWeights(red: number, green: number, blue: number, useIntegerApproximation: boolean = true): void {\r\n        // Note that for the native BarcodeDecoder or if the worker was destroyed, this is a no-op. However, the native\r\n        // implementations work also well with colored qr codes.\r\n        QrScanner._postWorkerMessage(\r\n            this._qrEnginePromise,\r\n            'grayscaleWeights',\r\n            { red, green, blue, useIntegerApproximation }\r\n        );\r\n    }\r\n\r\n    setInversionMode(inversionMode: QrScanner.InversionMode): void {\r\n        // Note that for the native BarcodeDecoder or if the worker was destroyed, this is a no-op. However, the native\r\n        // implementations scan normal and inverted qr codes by default\r\n        QrScanner._postWorkerMessage(this._qrEnginePromise, 'inversionMode', inversionMode);\r\n    }\r\n\r\n    static async createQrEngine(): Promise<Worker | BarcodeDetector>;\r\n    /** @deprecated */\r\n    static async createQrEngine(workerPath: string): Promise<Worker | BarcodeDetector>;\r\n    static async createQrEngine(workerPath?: string): Promise<Worker | BarcodeDetector> {\r\n        if (workerPath) {\r\n            console.warn('Specifying a worker path is not required and not supported anymore.');\r\n        }\r\n\r\n        // @ts-ignore no types defined for import\r\n        const createWorker = () => (import('./qr-scanner-worker.min.js') as Promise<{ createWorker: () => Worker }>)\r\n            .then((module) => module.createWorker());\r\n\r\n        const useBarcodeDetector = !QrScanner._disableBarcodeDetector\r\n            && 'BarcodeDetector' in window\r\n            && BarcodeDetector.getSupportedFormats\r\n            && (await BarcodeDetector.getSupportedFormats()).includes(this.DEFAULT_FORMAT);\r\n\r\n        if (!useBarcodeDetector) return createWorker();\r\n\r\n        // On Macs with an M1/M2 processor and macOS Ventura (macOS version 13), the BarcodeDetector is broken in\r\n        // Chromium based browsers, regardless of the version. For that constellation, the BarcodeDetector does not\r\n        // error but does not detect QR codes. Macs without an M1/M2 or before Ventura are fine.\r\n        // See issue #209 and https://bugs.chromium.org/p/chromium/issues/detail?id=1382442\r\n        // Issue in macOS is Verified in Chrome 113.0.5620.0.\r\n        const userAgentData = navigator.userAgentData;\r\n        const isChromiumOnMacWithArmVentura = userAgentData // all Chromium browsers support userAgentData\r\n          && userAgentData.brands.some(({ brand, version }) => /Chromium/i.test(brand) && parseInt(version) < 113)\r\n          && /mac ?OS/i.test(userAgentData.platform)\r\n          // Does it have an ARM chip (e.g. M1/M2) and Ventura? Check this last as getHighEntropyValues can\r\n          // theoretically trigger a browser prompt, although no browser currently does seem to show one.\r\n          // If browser or user refused to return the requested values, assume broken ARM Ventura, to be safe.\r\n          && await userAgentData.getHighEntropyValues(['architecture', 'platformVersion'])\r\n            .then(({ architecture, platformVersion }) =>\r\n              /arm/i.test(architecture || 'arm') && parseInt(platformVersion || '13') >= /* Ventura */ 13)\r\n            .catch(() => true);\r\n        if (isChromiumOnMacWithArmVentura) return createWorker();\r\n\r\n        return new BarcodeDetector({ formats:  this._barcodeDetectorFormats });\r\n    }\r\n\r\n    private _onPlay(): void {\r\n        this._scanRegion = this._calculateScanRegion(this.$video);\r\n        this._updateOverlay();\r\n        if (this.$overlay) {\r\n            this.$overlay.style.display = '';\r\n        }\r\n        this._scanFrame();\r\n    }\r\n\r\n    private _onLoadedMetaData(): void {\r\n        this._scanRegion = this._calculateScanRegion(this.$video);\r\n        this._updateOverlay();\r\n    }\r\n\r\n    private _onVisibilityChange(): void {\r\n        if (document.hidden) {\r\n            this.pause();\r\n        } else if (this._active) {\r\n            this.start();\r\n        }\r\n    }\r\n\r\n    private _calculateScanRegion(video: HTMLVideoElement): QrScanner.ScanRegion {\r\n        // Default scan region calculation. Note that this can be overwritten in the constructor.\r\n        const smallestDimension = Math.min(video.videoWidth, video.videoHeight);\r\n        const scanRegionSize = Math.round(2 / 3 * smallestDimension);\r\n        return {\r\n            x: Math.round((video.videoWidth - scanRegionSize) / 2),\r\n            y: Math.round((video.videoHeight - scanRegionSize) / 2),\r\n            width: scanRegionSize,\r\n            height: scanRegionSize,\r\n            downScaledWidth: this._legacyCanvasSize,\r\n            downScaledHeight: this._legacyCanvasSize,\r\n        };\r\n    }\r\n\r\n    private _updateOverlay(): void {\r\n        requestAnimationFrame(() => {\r\n            // Running in requestAnimationFrame which should avoid a potential additional re-flow for getComputedStyle\r\n            // and offsetWidth, offsetHeight, offsetLeft, offsetTop.\r\n            if (!this.$overlay) return;\r\n            const video = this.$video;\r\n            const videoWidth = video.videoWidth;\r\n            const videoHeight = video.videoHeight;\r\n            const elementWidth = video.offsetWidth;\r\n            const elementHeight = video.offsetHeight;\r\n            const elementX = video.offsetLeft;\r\n            const elementY = video.offsetTop;\r\n\r\n            const videoStyle = window.getComputedStyle(video);\r\n            const videoObjectFit = videoStyle.objectFit;\r\n            const videoAspectRatio = videoWidth / videoHeight;\r\n            const elementAspectRatio = elementWidth / elementHeight;\r\n            let videoScaledWidth: number;\r\n            let videoScaledHeight: number;\r\n            switch (videoObjectFit) {\r\n                case 'none':\r\n                    videoScaledWidth = videoWidth;\r\n                    videoScaledHeight = videoHeight;\r\n                    break;\r\n                case 'fill':\r\n                    videoScaledWidth = elementWidth;\r\n                    videoScaledHeight = elementHeight;\r\n                    break;\r\n                default: // 'cover', 'contains', 'scale-down'\r\n                    if (videoObjectFit === 'cover'\r\n                        ? videoAspectRatio > elementAspectRatio\r\n                        : videoAspectRatio < elementAspectRatio) {\r\n                        // The scaled height is the element height\r\n                        // - for 'cover' if the video aspect ratio is wider than the element aspect ratio\r\n                        //   (scaled height matches element height and scaled width overflows element width)\r\n                        // - for 'contains'/'scale-down' if element aspect ratio is wider than the video aspect ratio\r\n                        //   (scaled height matched element height and element width overflows scaled width)\r\n                        videoScaledHeight = elementHeight;\r\n                        videoScaledWidth = videoScaledHeight * videoAspectRatio;\r\n                    } else {\r\n                        videoScaledWidth = elementWidth;\r\n                        videoScaledHeight = videoScaledWidth / videoAspectRatio;\r\n                    }\r\n                    if (videoObjectFit === 'scale-down') {\r\n                        // for 'scale-down' the dimensions are the minimum of 'contains' and 'none'\r\n                        videoScaledWidth = Math.min(videoScaledWidth, videoWidth);\r\n                        videoScaledHeight = Math.min(videoScaledHeight, videoHeight);\r\n                    }\r\n            }\r\n\r\n            // getComputedStyle is so nice to convert keywords (left, center, right, top, bottom) to percent and makes\r\n            // sure to set the default of 50% if only one or no component was provided, therefore we can be sure that\r\n            // both components are set. Additionally, it converts units other than px (e.g. rem) to px.\r\n            const [videoX, videoY] = videoStyle.objectPosition.split(' ').map((length, i) => {\r\n                const lengthValue = parseFloat(length);\r\n                return length.endsWith('%')\r\n                    ? (!i ? elementWidth - videoScaledWidth : elementHeight - videoScaledHeight) * lengthValue / 100\r\n                    : lengthValue;\r\n            });\r\n\r\n            const regionWidth = this._scanRegion.width || videoWidth;\r\n            const regionHeight = this._scanRegion.height || videoHeight;\r\n            const regionX = this._scanRegion.x || 0;\r\n            const regionY = this._scanRegion.y || 0;\r\n\r\n            const overlayStyle = this.$overlay.style;\r\n            overlayStyle.width = `${regionWidth / videoWidth * videoScaledWidth}px`;\r\n            overlayStyle.height = `${regionHeight / videoHeight * videoScaledHeight}px`;\r\n            overlayStyle.top = `${elementY + videoY + regionY / videoHeight * videoScaledHeight}px`;\r\n            const isVideoMirrored = /scaleX\\(-1\\)/.test(video.style.transform!);\r\n            overlayStyle.left = `${elementX\r\n                + (isVideoMirrored ? elementWidth - videoX - videoScaledWidth : videoX)\r\n                + (isVideoMirrored ? videoWidth - regionX - regionWidth : regionX) / videoWidth * videoScaledWidth}px`;\r\n            // apply same mirror as on video\r\n            overlayStyle.transform = video.style.transform;\r\n        });\r\n    }\r\n\r\n    private static _convertPoints(\r\n        points: QrScanner.Point[],\r\n        scanRegion?: QrScanner.ScanRegion | null,\r\n    ): QrScanner.Point[] {\r\n        if (!scanRegion) return points;\r\n        const offsetX = scanRegion.x || 0;\r\n        const offsetY = scanRegion.y || 0;\r\n        const scaleFactorX = scanRegion.width && scanRegion.downScaledWidth\r\n            ? scanRegion.width / scanRegion.downScaledWidth\r\n            : 1;\r\n        const scaleFactorY = scanRegion.height && scanRegion.downScaledHeight\r\n            ? scanRegion.height / scanRegion.downScaledHeight\r\n            : 1;\r\n        for (const point of points) {\r\n            point.x = point.x * scaleFactorX + offsetX;\r\n            point.y = point.y * scaleFactorY + offsetY;\r\n        }\r\n        return points;\r\n    }\r\n\r\n    private _scanFrame(): void {\r\n        if (!this._active || this.$video.paused || this.$video.ended) return;\r\n        // If requestVideoFrameCallback is available use that to avoid unnecessary scans on the same frame as the\r\n        // camera's framerate can be lower than the screen refresh rate and this._maxScansPerSecond, especially in dark\r\n        // settings where the exposure time is longer. Both, requestVideoFrameCallback and requestAnimationFrame are not\r\n        // being fired if the tab is in the background, which is what we want.\r\n        const requestFrame = 'requestVideoFrameCallback' in this.$video\r\n            // @ts-ignore\r\n            ? this.$video.requestVideoFrameCallback.bind(this.$video)\r\n            : requestAnimationFrame;\r\n        requestFrame(async () => {\r\n            if (this.$video.readyState <= 1) {\r\n                // Skip scans until the video is ready as drawImage() only works correctly on a video with readyState\r\n                // > 1, see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage#Notes.\r\n                // This also avoids false positives for videos paused after a successful scan which remains visible on\r\n                // the canvas until the video is started again and ready.\r\n                this._scanFrame();\r\n                return;\r\n            }\r\n\r\n            const timeSinceLastScan = Date.now() - this._lastScanTimestamp;\r\n            const minimumTimeBetweenScans = 1000 / this._maxScansPerSecond;\r\n            if (timeSinceLastScan < minimumTimeBetweenScans) {\r\n                await new Promise((resolve) => setTimeout(resolve, minimumTimeBetweenScans - timeSinceLastScan));\r\n            }\r\n            // console.log('Scan rate:', Math.round(1000 / (Date.now() - this._lastScanTimestamp)));\r\n            this._lastScanTimestamp = Date.now();\r\n\r\n            let result: QrScanner.ScanResult | undefined;\r\n            try {\r\n                result = await QrScanner.scanImage(this.$video, {\r\n                    scanRegion: this._scanRegion,\r\n                    qrEngine: this._qrEnginePromise,\r\n                    canvas: this.$canvas,\r\n                });\r\n            } catch (error) {\r\n                if (!this._active) return;\r\n                this._onDecodeError(error as Error | string);\r\n            }\r\n\r\n            if (QrScanner._disableBarcodeDetector && !(await this._qrEnginePromise instanceof Worker)) {\r\n                // replace the disabled BarcodeDetector\r\n                this._qrEnginePromise = QrScanner.createQrEngine();\r\n            }\r\n\r\n            if (result) {\r\n                if (this._onDecode) {\r\n                    this._onDecode(result);\r\n                } else if (this._legacyOnDecode) {\r\n                    this._legacyOnDecode(result.data);\r\n                }\r\n\r\n                if (this.$codeOutlineHighlight) {\r\n                    clearTimeout(this._codeOutlineHighlightRemovalTimeout);\r\n                    this._codeOutlineHighlightRemovalTimeout = undefined;\r\n                    this.$codeOutlineHighlight.setAttribute(\r\n                        'viewBox',\r\n                        `${this._scanRegion.x || 0} `\r\n                            + `${this._scanRegion.y || 0} `\r\n                            + `${this._scanRegion.width || this.$video.videoWidth} `\r\n                            + `${this._scanRegion.height || this.$video.videoHeight}`,\r\n                    );\r\n                    const polygon = this.$codeOutlineHighlight.firstElementChild!;\r\n                    polygon.setAttribute('points', result.cornerPoints.map(({x, y}) => `${x},${y}`).join(' '));\r\n                    this.$codeOutlineHighlight.style.display = '';\r\n                }\r\n            } else if (this.$codeOutlineHighlight && !this._codeOutlineHighlightRemovalTimeout) {\r\n                // hide after timeout to make it flash less when on some frames the QR code is detected and on some not\r\n                this._codeOutlineHighlightRemovalTimeout = setTimeout(\r\n                    () => this.$codeOutlineHighlight!.style.display = 'none',\r\n                    100,\r\n                );\r\n            }\r\n\r\n            this._scanFrame();\r\n        });\r\n    }\r\n\r\n    private _onDecodeError(error: Error | string): void {\r\n        // default error handler; can be overwritten in the constructor\r\n        if (error === QrScanner.NO_QR_CODE_FOUND) return;\r\n        console.log(error);\r\n    }\r\n\r\n    private async _getCameraStream(): Promise<{ stream: MediaStream, facingMode: QrScanner.FacingMode }> {\r\n        if (!navigator.mediaDevices) throw 'Camera not found.';\r\n\r\n        const preferenceType = /^(environment|user)$/.test(this._preferredCamera)\r\n            ? 'facingMode'\r\n            : 'deviceId';\r\n        const constraintsWithoutCamera: Array<MediaTrackConstraints> = [{\r\n            width: { min: 1024 }\r\n        }, {\r\n            width: { min: 768 }\r\n        }, {}];\r\n        const constraintsWithCamera = constraintsWithoutCamera.map((constraint) => Object.assign({}, constraint, {\r\n            [preferenceType]: { exact: this._preferredCamera },\r\n        }));\r\n\r\n        for (const constraints of [...constraintsWithCamera, ...constraintsWithoutCamera]) {\r\n            try {\r\n                const stream = await navigator.mediaDevices.getUserMedia({ video: constraints, audio: false });\r\n                // Try to determine the facing mode from the stream, otherwise use a guess or 'environment' as\r\n                // default. Note that the guess is not always accurate as Safari returns cameras of different facing\r\n                // mode, even for exact facingMode constraints.\r\n                const facingMode = this._getFacingMode(stream)\r\n                    || (constraints.facingMode\r\n                        ? this._preferredCamera as QrScanner.FacingMode // a facing mode we were able to fulfill\r\n                        : (this._preferredCamera === 'environment'\r\n                            ? 'user' // switch as _preferredCamera was environment but we are not able to fulfill it\r\n                            : 'environment' // switch from unfulfilled user facingMode or default to environment\r\n                        )\r\n                    );\r\n                return { stream, facingMode };\r\n            } catch (e) {}\r\n        }\r\n\r\n        throw 'Camera not found.';\r\n    }\r\n\r\n    private async _restartVideoStream(): Promise<void> {\r\n        // Note that we always pause the stream and not only if !this._paused as even if this._paused === true, the\r\n        // stream might still be running, as it's by default only stopped after a delay of 300ms.\r\n        const wasPaused = this._paused;\r\n        const paused = await this.pause(true);\r\n        if (!paused || wasPaused || !this._active) return;\r\n        await this.start();\r\n    }\r\n\r\n    private static _stopVideoStream(stream : MediaStream): void {\r\n        for (const track of stream.getTracks()) {\r\n            track.stop(); //  note that this will also automatically turn the flashlight off\r\n            stream.removeTrack(track);\r\n        }\r\n    }\r\n\r\n    private _setVideoMirror(facingMode: QrScanner.FacingMode): void {\r\n        // in user facing mode mirror the video to make it easier for the user to position the QR code\r\n        const scaleFactor = facingMode === 'user'? -1 : 1;\r\n        this.$video.style.transform = 'scaleX(' + scaleFactor + ')';\r\n    }\r\n\r\n    private _getFacingMode(videoStream: MediaStream): QrScanner.FacingMode | null {\r\n        const videoTrack = videoStream.getVideoTracks()[0];\r\n        if (!videoTrack) return null; // unknown\r\n        // inspired by https://github.com/JodusNodus/react-qr-reader/blob/master/src/getDeviceId.js#L13\r\n        return /rear|back|environment/i.test(videoTrack.label)\r\n            ? 'environment'\r\n            : /front|user|face/i.test(videoTrack.label)\r\n                ? 'user'\r\n                : null; // unknown\r\n    }\r\n\r\n    private static _drawToCanvas(\r\n        image: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\r\n            | SVGImageElement,\r\n        scanRegion?: QrScanner.ScanRegion | null,\r\n        canvas?: HTMLCanvasElement | null,\r\n        disallowCanvasResizing= false,\r\n    ): [HTMLCanvasElement, CanvasRenderingContext2D] {\r\n        canvas = canvas || document.createElement('canvas');\r\n        const scanRegionX = scanRegion && scanRegion.x ? scanRegion.x : 0;\r\n        const scanRegionY = scanRegion && scanRegion.y ? scanRegion.y : 0;\r\n        const scanRegionWidth = scanRegion && scanRegion.width\r\n            ? scanRegion.width\r\n            : (image as HTMLVideoElement).videoWidth || image.width as number;\r\n        const scanRegionHeight = scanRegion && scanRegion.height\r\n            ? scanRegion.height\r\n            : (image as HTMLVideoElement).videoHeight || image.height as number;\r\n\r\n        if (!disallowCanvasResizing) {\r\n            const canvasWidth = scanRegion && scanRegion.downScaledWidth\r\n                ? scanRegion.downScaledWidth\r\n                : scanRegionWidth;\r\n            const canvasHeight = scanRegion && scanRegion.downScaledHeight\r\n                ? scanRegion.downScaledHeight\r\n                : scanRegionHeight;\r\n            // Setting the canvas width or height clears the canvas, even if the values didn't change, therefore only\r\n            // set them if they actually changed.\r\n            if (canvas.width !== canvasWidth) {\r\n                canvas.width = canvasWidth;\r\n            }\r\n            if (canvas.height !== canvasHeight) {\r\n                canvas.height = canvasHeight;\r\n            }\r\n        }\r\n\r\n        const context = canvas.getContext('2d', { alpha: false })!;\r\n        context.imageSmoothingEnabled = false; // gives less blurry images\r\n        context.drawImage(\r\n            image,\r\n            scanRegionX, scanRegionY, scanRegionWidth, scanRegionHeight,\r\n            0, 0, canvas.width, canvas.height,\r\n        );\r\n        return [canvas, context];\r\n    }\r\n\r\n    private static async _loadImage(\r\n        imageOrFileOrBlobOrUrl: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\r\n            | SVGImageElement | File | Blob | URL | String,\r\n    ): Promise<HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\r\n        | SVGImageElement > {\r\n        if (imageOrFileOrBlobOrUrl instanceof Image) {\r\n            await QrScanner._awaitImageLoad(imageOrFileOrBlobOrUrl);\r\n            return imageOrFileOrBlobOrUrl;\r\n        } else if (imageOrFileOrBlobOrUrl instanceof HTMLVideoElement\r\n            || imageOrFileOrBlobOrUrl instanceof HTMLCanvasElement\r\n            || imageOrFileOrBlobOrUrl instanceof SVGImageElement\r\n            || 'OffscreenCanvas' in window && imageOrFileOrBlobOrUrl instanceof OffscreenCanvas\r\n            || 'ImageBitmap' in window && imageOrFileOrBlobOrUrl instanceof ImageBitmap) {\r\n            return imageOrFileOrBlobOrUrl;\r\n        } else if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob\r\n            || imageOrFileOrBlobOrUrl instanceof URL || typeof imageOrFileOrBlobOrUrl === 'string') {\r\n            const image = new Image();\r\n            if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob) {\r\n                image.src = URL.createObjectURL(imageOrFileOrBlobOrUrl);\r\n            } else {\r\n                image.src = imageOrFileOrBlobOrUrl.toString();\r\n            }\r\n            try {\r\n                await QrScanner._awaitImageLoad(image);\r\n                return image;\r\n            } finally {\r\n                if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob) {\r\n                    URL.revokeObjectURL(image.src);\r\n                }\r\n            }\r\n        } else {\r\n            throw 'Unsupported image type.';\r\n        }\r\n    }\r\n\r\n    private static async _awaitImageLoad(image: HTMLImageElement): Promise<void> {\r\n        if (image.complete && image.naturalWidth !== 0) return; // already loaded\r\n        await new Promise<void>((resolve, reject) => {\r\n            const listener = (event: ErrorEvent | Event) => {\r\n                image.removeEventListener('load', listener);\r\n                image.removeEventListener('error', listener);\r\n                if (event instanceof ErrorEvent) {\r\n                    reject('Image load error');\r\n                } else {\r\n                    resolve();\r\n                }\r\n            };\r\n            image.addEventListener('load', listener);\r\n            image.addEventListener('error', listener);\r\n        });\r\n    }\r\n\r\n    private static async _postWorkerMessage(\r\n        qrEngineOrQrEnginePromise: Worker | BarcodeDetector | Promise<Worker | BarcodeDetector>,\r\n        type: string,\r\n        data?: any,\r\n        transfer?: Transferable[],\r\n    ): Promise<number> {\r\n        return QrScanner._postWorkerMessageSync(await qrEngineOrQrEnginePromise, type, data, transfer);\r\n    }\r\n\r\n    // sync version of _postWorkerMessage without performance overhead of async functions\r\n    private static _postWorkerMessageSync(\r\n        qrEngine: Worker | BarcodeDetector,\r\n        type: string,\r\n        data?: any,\r\n        transfer?: Transferable[],\r\n    ): number {\r\n        if (!(qrEngine instanceof Worker)) return -1;\r\n        const id = QrScanner._workerMessageId++;\r\n        qrEngine.postMessage({\r\n            id,\r\n            type,\r\n            data,\r\n        }, transfer);\r\n        return id;\r\n    }\r\n}\r\n\r\ndeclare namespace QrScanner {\r\n    export interface ScanRegion {\r\n        x?: number;\r\n        y?: number;\r\n        width?: number;\r\n        height?: number;\r\n        downScaledWidth?: number;\r\n        downScaledHeight?: number;\r\n    }\r\n\r\n    export type FacingMode = 'environment' | 'user';\r\n    export type DeviceId = string;\r\n\r\n    export interface Camera {\r\n        id: DeviceId;\r\n        label: string;\r\n    }\r\n\r\n    export type InversionMode = 'original' | 'invert' | 'both';\r\n\r\n    export interface Point {\r\n        x: number;\r\n        y: number;\r\n    }\r\n\r\n    export interface ScanResult {\r\n        data: string;\r\n        // In clockwise order, starting at top left, but this might not be guaranteed in the future.\r\n        cornerPoints: QrScanner.Point[];\r\n    }\r\n}\r\n\r\n// simplified from https://wicg.github.io/shape-detection-api/#barcode-detection-api\r\ndeclare class BarcodeDetector {\r\n    constructor(options?: { formats: string[] });\r\n    static getSupportedFormats(): Promise<string[]>;\r\n    detect(image: ImageBitmapSource): Promise<Array<{ rawValue: string, cornerPoints: QrScanner.Point[] }>>;\r\n}\r\n\r\n// simplified from https://github.com/lukewarlow/user-agent-data-types/blob/master/index.d.ts\r\ndeclare global {\r\n    interface Navigator {\r\n        readonly userAgentData?: {\r\n            readonly platform: string;\r\n            readonly brands: Array<{\r\n                readonly brand: string;\r\n                readonly version: string;\r\n            }>;\r\n            getHighEntropyValues(hints: string[]): Promise<{\r\n                readonly architecture?: string;\r\n                readonly platformVersion?: string;\r\n            }>;\r\n        };\r\n    }\r\n}\r\n\r\nexport default QrScanner;\r\n"],"names":["QrScanner","constructor","video","onDecode","canvasSizeOrOnDecodeErrorOrOptions","canvasSizeOrCalculateScanRegion","preferredCamera","DEFAULT_CANVAS_SIZE","$video","$canvas","document","createElement","_onDecode","console","warn","_legacyOnDecode","_onDecodeError","options","onDecodeError","_calculateScanRegion","calculateScanRegion","_preferredCamera","_legacyCanvasSize","_maxScansPerSecond","maxScansPerSecond","_onPlay","bind","_onLoadedMetaData","_onVisibilityChange","_updateOverlay","disablePictureInPicture","playsInline","muted","shouldHideVideo","hidden","body","contains","appendChild","barcodeDetectorFormats","length","_barcodeDetectorFormats","highlightScanRegion","highlightCodeOutline","$overlay","overlay","overlayStyle","position","display","pointerEvents","classList","add","gotExternalOverlay","innerHTML","firstElementChild","animate","transform","duration","iterations","Infinity","direction","easing","e","videoContainer","insertBefore","nextSibling","insertAdjacentHTML","$codeOutlineHighlight","lastElementChild","_scanRegion","requestAnimationFrame","videoStyle","style","setProperty","visibility","opacity","width","height","parentElement","removeChild","addEventListener","window","_qrEnginePromise","createQrEngine","workerPath","hasCamera","listCameras","requestLabels","navigator","mediaDevices","filter","device","openedStream","every","enumerateCameras","camera","label","getUserMedia","audio","map","i","id","deviceId","_stopVideoStream","hasFlash","stream","srcObject","MediaStream","_getCameraStream","getVideoTracks","getSettings","isFlashOn","_flashOn","turnFlashOnOff","onOff","_destroyed","_active","_paused","applyConstraints","advanced","torch","oldFlashOn","toggleFlash","turnFlashOn","turnFlashOff","destroy","removeEventListener","stop","_postWorkerMessage","start","Error","location","protocol","play","facingMode","_setVideoMirror","catch","pause","stopStreamImmediately","stopStream","Promise","resolve","setTimeout","setCamera","facingModeOrDeviceId","_restartVideoStream","scanImage","imageOrFileOrBlobOrUrl","scanRegionOrOptions","qrEngine","canvas","disallowCanvasResizing","alsoTryWithoutScanRegion","scanRegion","returnDetailedScanResult","image","canvasContext","all","_loadImage","_drawToCanvas","detailedScanResult","Worker","gotExternalEngine","_postWorkerMessageSync","qrEngineWorker","reject","timeout","onMessage","onError","expectedResponseId","event","data","clearTimeout","cornerPoints","_convertPoints","NO_QR_CODE_FOUND","error","imageData","buffer","race","scanResult","rawValue","message","test","errorMessage","_disableBarcodeDetector","setGrayscaleWeights","red","green","blue","useIntegerApproximation","setInversionMode","inversionMode","then","module","createWorker","BarcodeDetector","getSupportedFormats","includes","DEFAULT_FORMAT","userAgentData","brands","some","brand","version","parseInt","platform","getHighEntropyValues","architecture","platformVersion","formats","_scanFrame","x","Math","round","videoWidth","scanRegionSize","y","videoHeight","downScaledWidth","downScaledHeight","videoObjectFit","videoScaledWidth","videoScaledHeight","elementWidth","elementHeight","videoAspectRatio","elementAspectRatio","min","videoY","lengthValue","parseFloat","endsWith","regionWidth","regionHeight","top","elementY","regionY","left","elementX","isVideoMirrored","videoX","regionX","points","point","scaleFactorX","offsetX","scaleFactorY","offsetY","paused","ended","requestVideoFrameCallback","readyState","timeSinceLastScan","minimumTimeBetweenScans","_lastScanTimestamp","Date","now","result","_codeOutlineHighlightRemovalTimeout","undefined","setAttribute","join","log","constraint","preferenceType","exact","constraints","wasPaused","track","removeTrack","_getFacingMode","videoStream","videoTrack","scanRegionWidth","scanRegionHeight","canvasWidth","canvasHeight","alpha","context","imageSmoothingEnabled","drawImage","scanRegionX","scanRegionY","Image","_awaitImageLoad","HTMLVideoElement","HTMLCanvasElement","SVGImageElement","OffscreenCanvas","ImageBitmap","File","Blob","URL","src","createObjectURL","toString","revokeObjectURL","complete","naturalWidth","listener","ErrorEvent","qrEngineOrQrEnginePromise","type","transfer","postMessage"],"mappings":"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"}